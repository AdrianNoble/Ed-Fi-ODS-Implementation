// ------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated.
//
//     - To turn off auto-generation set:
//
//         [TeamCity (AutoGenerate = false)]
//
//     - To trigger manual generation invoke:
//
//         nuke --generate-configuration TeamCity --host TeamCity
//
// </auto-generated>
// ------------------------------------------------------------------------------

import jetbrains.buildServer.configs.kotlin.v2018_1.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildFeatures.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildSteps.*
import jetbrains.buildServer.configs.kotlin.v2018_1.triggers.*
import jetbrains.buildServer.configs.kotlin.v2018_1.vcs.*

version = "2018.2"

project {
    buildType(Clean)
    buildType(InstallTools)
    buildType(InstallCodeGen)
    buildType(RunCodeGen)
    buildType(InstallConfigTransformerCore)
    buildType(InstallDbDeploy)
    buildType(InstallNuGetExe)
    buildType(Restore)
    buildType(RestoreNuGetPackages)
    buildType(Compile)
    buildType(Test_P1T2)
    buildType(Test_P2T2)
    buildType(Test)
    buildType(NUnitUnitTests)
    buildType(NUnitWebServiceIntegrationTest)
    buildType(NUnitIntegrationTest)

    buildTypesOrder = arrayListOf(Clean, InstallTools, InstallCodeGen, RunCodeGen, InstallConfigTransformerCore, InstallDbDeploy, InstallNuGetExe, Restore, RestoreNuGetPackages, Compile, Test_P1T2, Test_P2T2, Test, NUnitUnitTests, NUnitWebServiceIntegrationTest, NUnitIntegrationTest)

    params {
        select (
            "env.Verbosity",
            label = "Verbosity",
            description = "Logging verbosity during build execution. Default is 'Normal'.",
            value = "Normal",
            options = listOf("Minimal" to "Minimal", "Normal" to "Normal", "Quiet" to "Quiet", "Verbose" to "Verbose"),
            display = ParameterDisplay.NORMAL)
        select (
            "env.Configuration",
            label = "Configuration",
            description = "Configuration to build - Default is 'Debug' (local) or 'Release' (server)",
            value = "Release",
            options = listOf("Debug" to "Debug", "Release" to "Release"),
            display = ParameterDisplay.NORMAL)
        text (
            "env.MaxCpuCount",
            label = "MaxCpuCount",
            description = "Max CPU count  - Default is Environment.ProcessorCount",
            value = "8",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        select (
            "env.Engine",
            label = "Engine",
            description = "Database Engine - Default 'SQLServer' or 'PostgreSQL'",
            value = "SQLServer",
            options = listOf("PostgreSQL" to "PostgreSQL", "SQLServer" to "SQLServer"),
            display = ParameterDisplay.NORMAL)
        checkbox (
            "env.NoCodeGen",
            label = "NoCodeGen",
            description = "Exclude Code - Default false",
            value = "False",
            checked = "True",
            unchecked = "False",
            display = ParameterDisplay.NORMAL)
        select (
            "env.Verbosity",
            label = "Verbosity",
            description = "MsBuild Verbosity - Default Minimal",
            value = "Minimal",
            options = listOf("Detailed" to "Detailed", "Diagnostic" to "Diagnostic", "Minimal" to "Minimal", "Normal" to "Normal", "Quiet" to "Quiet"),
            display = ParameterDisplay.NORMAL)
        param(
            "teamcity.runner.commandline.stdstreams.encoding",
            "UTF-8"
        )
    }
}
object Clean : BuildType({
    name = "Clean"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "Clean --skip"
        }
    }
    triggers {
        vcs {
            triggerRules = "+:**"
        }
    }
})
object InstallTools : BuildType({
    name = "InstallTools"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "InstallTools --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Clean.id}"
        }
    }
})
object InstallCodeGen : BuildType({
    name = "InstallCodeGen"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "InstallCodeGen --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${InstallTools.id}"
        }
    }
})
object RunCodeGen : BuildType({
    name = "RunCodeGen"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "RunCodeGen --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${InstallTools.id}"
        }
    }
})
object InstallConfigTransformerCore : BuildType({
    name = "InstallConfigTransformerCore"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "InstallConfigTransformerCore --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${InstallTools.id}"
        }
    }
})
object InstallDbDeploy : BuildType({
    name = "InstallDbDeploy"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "InstallDbDeploy --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${InstallTools.id}"
        }
    }
})
object InstallNuGetExe : BuildType({
    name = "InstallNuGetExe"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "InstallNuGetExe --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Clean.id}"
        }
    }
})
object Restore : BuildType({
    name = "Restore"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "Restore --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Clean.id}"
        }
    }
})
object RestoreNuGetPackages : BuildType({
    name = "RestoreNuGetPackages"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "RestoreNuGetPackages --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Clean.id}"
        }
    }
})
object Compile : BuildType({
    name = "Compile"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "Compile --skip"
        }
    }
    triggers {
        vcs {
            triggerRules = "+:**"
        }
    }
})
object Test_P1T2 : BuildType({
    name = "Test 1/2"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "test_results/*.xml => test_results"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Test --skip --test-partition 1"
        }
    }
})
object Test_P2T2 : BuildType({
    name = "Test 2/2"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "test_results/*.xml => test_results"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Test --skip --test-partition 2"
        }
    }
})
object Test : BuildType({
    name = "Test"
    type = Type.COMPOSITE
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
        showDependenciesChanges = true
    }
    artifactRules = "**/*"
    triggers {
        vcs {
            triggerRules = "+:**"
        }
    }
    dependencies {
        snapshot(Test_P1T2) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(Test_P2T2) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        artifacts(Test_P1T2) {
            artifactRules = "**/*"
        }
        artifacts(Test_P2T2) {
            artifactRules = "**/*"
        }
    }
})
object NUnitUnitTests : BuildType({
    name = "NUnitUnitTests"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "NUnitUnitTests --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Test.id}"
        }
    }
})
object NUnitWebServiceIntegrationTest : BuildType({
    name = "NUnitWebServiceIntegrationTest"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "test_results/*.xml => test_results"
    steps {
        exec {
            path = "build.cmd"
            arguments = "NUnitWebServiceIntegrationTest --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Test.id}"
        }
    }
})
object NUnitIntegrationTest : BuildType({
    name = "NUnitIntegrationTest"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "test_results/*.xml => test_results"
    steps {
        exec {
            path = "build.cmd"
            arguments = "NUnitIntegrationTest --skip"
        }
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Test.id}"
        }
    }
})
